<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <!-- 1. 添加log4net的节点声明配置代码-->
    <configSections>
        <section name = "log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />
    </configSections>
    <!--2. log4net的核心配置代码-->
    <log4net>
        <!--把日志信息输出到以日期命名的文件里-->
        <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
            <!--文件夹的位置-->
            <file value="D:\MyLog1\" />
            <!--是否追加到文件-->
            <appendToFile value="true" />
            <!--动态生成文件名-->
            <param name="StaticLogFileName" value="false" />
            <!--以日期命名-->
            <param name="DatePattern" value="yyyyMMdd/yyyyMMddHH&quot;.log&quot;" />
            <!--在根目录下按日期产生文件夹，文件名固定 test.log  -->
            <!--<param name="DatePattern" value="yyyy-MM-dd/"test.log""  />-->
            <!--在根目录下按日期产生文件夹，这是按日期产生文件夹，并在文件名前也加上日期  -->
            <!--<param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-test.log""  />-->
            <!--1.7.4 在根目录下按日期产生文件夹，这再形成下一级固定的文件夹  -->
            <!--<param name="DatePattern" value="yyyyMMdd/"OrderInfor/test.log""  />-->
            <!--配置按照何种方式产生多个日志文件 （Date：日期、Size：文件大小、Composite：日期和文件大小的混合方式）-->
            <param name="RollingStyle" value="Composite" />
            <!--配置每个日志的大小。【只在1.6 RollingStyle 选择混合方式与文件大小方式下才起作用！！！】可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志，
      超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。-->
            <param name="maximumFileSize" value="50MB" />
            <!--最多产生的日志文件个数，超过则保留最新的n个 将value的值设置-1，则不限文件个数 【只在RollingStyle RollingStyle 选择混合方式与文件大小方式下才起作用！！！】
        与maximumFileSize文件大小是配合使用的-->
            <param name="MaxSizeRollBackups" value="5" />
            <rollingStyle value="Date" />
            <!--日志在日志文件中的布局方式-->xl
            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n%日志内容：%message%newline %n"/>
            </layout>
            <!--使用最小锁定模型（minimal locking model），以允许多个进程可以写入同一个文件 -->
            <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
        </appender>

        <!--2. 输出途径(二) 记录日志到数据库-->
        <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
            <!--2.1 设置缓冲区大小，只有日志记录超设定值才会一块写入到数据库-->
            <bufferSize value="1" />
            <!--2.2 引用-->
            <connectionType value="System.Data.SqlClient.SqlConnection, System.Data" />
            <!--2.3 数据库连接字符串-->
            <connectionString value="data source=DESKTOP-FFG55EG;initial catalog=Test;integrated security=false;persist security info=True;User ID=sa;Password=wang0705" />
            <!--2.4 SQL语句插入到指定表-->
            <commandText value="INSERT INTO Log (Date,Thread,Level,Logger,Message,Exception) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
            <!--<commandText value="INSERT INTO LogInfor ([threadId],[log_level],[log_name],[log_msg],[log_exception],[log_time]) VALUES (@threadId, @log_level, @log_name, @log_msg, @log_exception,@log_time)" />-->
            <!--2.5 数据库字段匹配-->
            <parameter>
                <parameterName value="@log_date" />
                <dbType value="DateTime" />
                <layout type="log4net.Layout.RawTimeStampLayout" />
            </parameter>
            <parameter>
                <parameterName value="@thread" />
                <dbType value="String" />
                <size value="255" />
                <layout type="log4net.Layout.PatternLayout">
                    <conversionPattern value="%thread" />
                </layout>
            </parameter>
            <parameter>
                <parameterName value="@log_level" />
                <dbType value="String" />
                <size value="50" />
                <layout type="log4net.Layout.PatternLayout">
                    <conversionPattern value="%level" />
                </layout>
            </parameter>
            <parameter>
                <parameterName value="@logger" />
                <dbType value="String" />
                <size value="255" />
                <layout type="log4net.Layout.PatternLayout">
                    <conversionPattern value="%logger" />
                </layout>
            </parameter>
            <parameter>
                <parameterName value="@message" />
                <dbType value="String" />
                <size value="4000" />
                <layout type="log4net.Layout.PatternLayout">
                    <conversionPattern value="%message" />
                </layout>
            </parameter>
            <parameter>
                <parameterName value="@exception" />
                <dbType value="String" />
                <size value="2000" />
                <layout type="log4net.Layout.ExceptionLayout" />
            </parameter>
        </appender>
        <!--配置日志的的输出级别和加载日志的输出途径-->
        <root>
            <!-- 控制级别，由低到高：ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF ，OFF表示所有信息都不写入-->
            <!-- 比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录 -->
            <!-- 如果没有定义LEVEL的值，则缺省为DEBUG -->
            <level value="ALL"></level>
            <appender-ref ref="AdoNetAppender"></appender-ref>
            <appender-ref ref="RollingFileAppender"></appender-ref>
        </root>
    </log4net>
</configuration>